
resource "rancher_stack" "drone" {
  name = "drone"
  description = "A service that's always happy"
  start_on_create = true
  environment_id = "${var.rancher_environment_id}"

  docker_compose = <<EOF
version: '2'
services:
  server:
    image: drone/drone:0.8.2
    environment:
      DRONE_DEBUG: 'false'
      DRONE_GITHUB: 'true'
      DRONE_GITHUB_CLIENT: ${var.drone_github_client}
      DRONE_GITHUB_SECRET: ${var.drone_github_secret}
      DRONE_HOST: http://drone.hvt.zone
      DRONE_OPEN: 'true'
      DRONE_SECRET: '@sUM]mSV@T{11nF0' # auto generated by rancher plugin
      GIN_MODE: release
      NO_PROXY: drone
      no_proxy: drone
    volumes_from:
    - server-volume
    labels:
      io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}
      io.rancher.sidekicks: server-volume
      io.rancher.container.hostname_override: container_name
  agent:
    image: drone/agent:0.8.2
    environment:
      DRONE_SECRET: '@sUM]mSV@T{11nF0' # auto generated by rancher plugin
      DRONE_SERVER: drone:9000
      NO_PROXY: drone
      no_proxy: drone
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    links:
    - server:drone
    command:
    - agent
    labels:
      io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}
      io.rancher.container.hostname_override: container_name
  server-volume:
    image: rawmind/alpine-volume:0.0.2-1
    environment:
      SERVICE_GID: '0'
      SERVICE_UID: '0'
      SERVICE_VOLUME: /var/lib/drone
    network_mode: none
    volumes:
    - /var/lib/drone
    labels:
      io.rancher.container.start_once: 'true'
      io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}
      io.rancher.container.hostname_override: container_name
EOF

  rancher_compose = <<EOF
version: '2'
services:
  server:
    scale: 1
    start_on_create: true
    health_check:
      healthy_threshold: 2
      response_timeout: 2000
      port: 8000
      unhealthy_threshold: 3
      interval: 2000
      strategy: recreate
      request_line: GET / HTTP/1.0
  agent:
    scale: 1
    start_on_create: true
  server-volume:
    scale: 1
    start_on_create: true
EOF

  finish_upgrade = true

  environment {
    STARTED = "${timestamp()}"
  }
}


